generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  email     String   @unique
  name      String?
  avatar    String?
  status    String   @default("1")
  isSystem  String   @default("0")  // 是否为系统默认数据，0-否 1-是，系统默认数据无法删除
  roleId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  Role      Role     @relation(fields: [roleId], references: [id])

  // 接口测试关联
  apiTestHistories ApiTestHistory[]
  apiTestTemplates ApiTestTemplate[]
  // 日志关联
  loginLogs       LoginLog[]
  operLogs        OperLog[]

  // 记账理财关联
  accounts        Account[]
  billCategories  BillCategory[]
  bills           Bill[]
  transfers       TransferRecord[]
  budgets         Budget[]
  billImports     BillImport[]
  billTemplates   BillTemplate[]
  billTags        BillTag[]
  billStatRules   BillStatRule[]
  balanceAdjustLogs BalanceAdjustLog[] // 余额调整日志关联

  @@index([roleId])
  @@map("users")
}

model Role {
  id          Int      @id @default(autoincrement())
  key         String   @unique   // 角色唯一标识
  name        String   @unique
  description String?
  status      String   @default("1")
  isSystem    String   @default("0")  // 是否为系统默认数据，0-否 1-是，系统默认数据无法删除
  createdAt   DateTime @default(now())
  updatedAt   DateTime? @updatedAt
  User        User[]
}

model Config {
  id          Int       @id @default(autoincrement())
  key         String    @unique
  value       String
  description String?
  type        String    @default("string")  // 可以是string, number, boolean, json等
  group       String?   // 可以用于分组配置项
  sort        Int       @default(0)         // 排序字段
  status      String    @default("1")       // 1-启用 0-禁用
  isSystem    String    @default("0")       // 是否为系统默认数据，0-否 1-是，系统默认数据无法删除
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model Dictionary {
  id          Int              @id @default(autoincrement())
  code        String           @unique      // 字典编码，唯一标识
  name        String           // 字典名称
  description String?          // 字典描述
  sort        Int              @default(0)  // 排序字段
  status      String           @default("1")  // 1-启用 0-禁用
  isSystem    String           @default("0")  // 是否为系统默认数据，0-否 1-是，系统默认数据无法删除
  createdAt   DateTime         @default(now())
  updatedAt   DateTime?        @updatedAt
  items       DictionaryItem[] // 字典项
}

model DictionaryItem {
  id           Int       @id @default(autoincrement())
  dictionaryId Int       // 所属字典ID
  code         String    // 字典项编码
  value        String    // 字典项值
  label        String    // 字典项标签
  color        String?   // 字典项颜色值，如 #FF0000
  extra        String?   // 附加数据，JSON字符串
  isSystem    String    @default("0")  // 是否为系统默认数据，0-否 1-是，系统默认数据无法删除
  description String? // 字典项描述
  sort         Int       @default(0)  // 排序字段
  status       String    @default("1")  // 1-启用 0-禁用
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  dictionary   Dictionary @relation(fields: [dictionaryId], references: [id], onDelete: Cascade)

  @@index([dictionaryId])
  @@unique([dictionaryId, code])
}

model CodeGenerator {
  id          Int       @id @default(autoincrement())
  name        String    // 代码生成名称
  description String?   // 描述
  tableName   String    // 表名称
  moduleName  String    // 模块名称
  businessName String   // 业务名称
  options     String?   // 选项，如是否生成API、是否生成表单等，JSON格式
  remark      String?   // 备注
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  columns     CodeGeneratorColumn[] // 列信息
}

model CodeGeneratorColumn {
  id              Int      @id @default(autoincrement())
  generatorId     Int      // 关联的代码生成器ID
  columnName      String   // 列名
  columnComment   String?  // 列注释
  columnType      String   // 列类型
  tsType          String   // TypeScript类型
  isPk            Boolean  @default(false) // 是否是主键
  isIncrement     Boolean  @default(false) // 是否自增
  isRequired      Boolean  @default(true)  // 是否必填
  isInsert        Boolean  @default(true)  // 是否为插入字段
  isEdit          Boolean  @default(true)  // 是否为编辑字段
  isList          Boolean  @default(true)  // 是否为列表字段
  isQuery         Boolean  @default(false) // 是否为查询字段
  queryType       String?  // 查询方式（eq等于、like模糊）
  htmlType        String?  // 显示类型（文本框、文本域、下拉框、复选框、单选框、日期控件）
  dictType        String?  // 字典类型
  sort            Int      @default(0)     // 排序
  generator       CodeGenerator @relation(fields: [generatorId], references: [id], onDelete: Cascade)

  @@index([generatorId])
}

// 接口测试历史记录
model ApiTestHistory {
  id        Int      @id @default(autoincrement())
  name      String?  @db.VarChar(100)
  url       String   @db.VarChar(500)
  method    String   @db.VarChar(10)
  request   Json     // 请求详情，包含头、参数、请求体等
  response  Json?    // 响应详情
  createdAt DateTime @default(now()) @map("created_at")
  userId    Int?     @map("user_id")
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("api_test_history")
}

// 接口测试模板
model ApiTestTemplate {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  url         String   @db.VarChar(500)
  method      String   @db.VarChar(10)
  headers     Json     // 请求头
  params      Json?    // URL参数
  body        Json?    // 请求体
  contentType String   @map("content_type") @db.VarChar(100)
  description String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  userId      Int?     @map("user_id")
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("api_test_template")
}

// 数据库连接配置
model DatabaseConnection {
  id        Int       @id @default(autoincrement())
  name      String    // 连接名称
  type      String    // 数据库类型: mysql, postgres, mssql, mariadb, sqlite
  host      String?   // 主机地址
  port      Int?      // 端口
  username  String?   // 用户名
  password  String?   // 密码
  database  String    // 数据库名
  filename  String?   // SQLite文件路径
  ssl       Boolean   @default(false) // 是否启用SSL
  status    String    @default("1")   // 1-启用 0-禁用
  isSystem  String    @default("0")   // 是否为系统默认数据，0-否 1-是，系统默认数据无法删除
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("database_connections")
}

// 系统资源监控记录
model SystemResource {
  id        Int      @id @default(autoincrement())
  cpuUsage  Float    // CPU使用率
  memUsage  Float    // 内存使用率
  diskUsage Float    // 磁盘使用率
  uptime    Int      // 系统运行时间(秒)
  timestamp DateTime @default(now()) // 记录时间
  
  @@map("system_resources")
}

// API请求监控记录
model ApiMonitor {
  id            Int      @id @default(autoincrement())
  path          String   // API路径
  method        String   // 请求方法
  statusCode    Int      // 状态码
  responseTime  Int      // 响应时间(ms)
  requestCount  Int      // 请求计数
  errorCount    Int      // 错误计数
  contentLength Int?     // 请求内容大小(bytes)
  responseSize  Int?     // 响应内容大小(bytes)
  userAgent     String?  // 用户代理
  ip            String?  // 客户端IP
  userId        Int?     // 用户ID(如果已登录)
  date          DateTime @default(now()) // 日期(按天统计)
  
  @@unique([path, method, date])
  @@map("api_monitors")
}

// API请求详细记录 - 用于保存单个请求的详细信息
model ApiMonitorDetail {
  id            Int       @id @default(autoincrement())
  path          String    // API路径
  method        String    // 请求方法
  statusCode    Int       // 状态码
  responseTime  Int       // 响应时间(ms)
  contentLength Int?      // 请求内容大小(bytes)
  responseSize  Int?      // 响应内容大小(bytes)
  userAgent     String?   // 用户代理
  ip            String?   // 客户端IP
  userId        Int?      // 用户ID(如果已登录)
  errorMessage  String?   @db.Text // 错误信息(如果有)，修改为Text类型以支持长文本
  requestBody   String?   @db.Text // 请求体(截取部分)
  responseBody  String?   @db.Text // 响应体(截取部分)
  createdAt     DateTime  @default(now()) // 创建时间
  
  @@map("api_monitor_details")
}

// API警报配置
model ApiAlertConfig {
  id                    Int       @id @default(autoincrement())
  path                  String?   // 特定API路径(可选)
  responseTimeThreshold Int       // 响应时间阈值(ms)
  errorRateThreshold    Int       // 错误率阈值(%)
  enabled               Boolean   @default(true) // 是否启用
  createdAt             DateTime  @default(now())
  updatedAt             DateTime? @updatedAt
  
  @@map("api_alert_configs")
}

// 系统日志统计
model LogStat {
  id        Int      @id @default(autoincrement())
  level     String   // 日志级别: error, warn, info
  count     Int      // 计数
  date      DateTime @default(now()) // 日期(按天统计)
  
  @@unique([level, date])
  @@map("log_stats")
}

// 系统通知
model Notification {
  id          Int       @id @default(autoincrement())
  title       String    // 通知标题
  content     String    @db.Text // 通知内容
  type        String    // 通知类型（来源于字典）
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  @@map("notifications")
}

// 定时任务
model ScheduleJob {
  id             Int       @id @default(autoincrement())
  jobName        String    // 任务名称
  jobGroup       String    @default("DEFAULT") // 任务分组
  invokeTarget   String    // 调用目标字符串
  cronExpression String    // cron表达式
  misfirePolicy  String    @default("1") // 计划执行错误策略（1立即执行 2执行一次 3放弃执行）
  concurrent     String    @default("1") // 是否并发执行（0允许 1禁止）
  status         String    @default("0") // 状态（0暂停 1正常）
  isSystem       String    @default("0") // 是否为系统默认数据，0-否 1-是，系统默认数据无法删除
  remark         String?   // 备注信息
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @updatedAt
  logs           ScheduleJobLog[] // 关联的任务日志

  @@map("schedule_jobs")
}

// 定时任务日志
model ScheduleJobLog {
  id            Int       @id @default(autoincrement())
  jobId         Int       // 任务ID
  jobName       String    // 任务名称
  jobGroup      String    // 任务组名
  invokeTarget  String    // 调用目标
  jobMessage    String?   // 日志信息
  status        String    @default("0") // 执行状态（0失败 1成功）
  exceptionInfo String?   @db.Text // 异常信息
  startTime     DateTime? // 开始时间
  endTime       DateTime? // 结束时间
  createdAt     DateTime  @default(now())
  job           ScheduleJob @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId])
  @@map("schedule_job_logs")
}

// 登录日志
model LoginLog {
  id          Int       @id @default(autoincrement())
  userId      Int?      // 用户ID，可以为空（登录失败的情况）
  username    String    // 用户名
  ipAddress   String    // 登录IP地址
  loginLocation String?  // 登录地点
  browser     String?   // 浏览器类型
  os          String?   // 操作系统
  status      String    @default("0") // 登录状态（0失败 1成功）
  msg         String?   // 提示消息
  loginTime   DateTime  @default(now()) // 登录时间
  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([loginTime])
  @@map("login_logs")
}

// 操作日志
model OperLog {
  id            Int       @id @default(autoincrement())
  title         String    // 操作模块
  businessType  String    @default("0") // 业务类型（0其它 1新增 2修改 3删除）
  method        String?   // 请求方法
  requestMethod String?   // HTTP请求方法
  operatorType  String    @default("0") // 操作类别（0其它 1后台用户 2手机端用户）
  operName      String?   // 操作人员
  operUrl       String?   // 请求URL
  operIp        String?   // 主机地址
  operLocation  String?   // 操作地点
  operParam     String?   @db.Text // 请求参数
  jsonResult    String?   @db.Text // 返回参数
  status        String    @default("0") // 操作状态（0正常 1异常）
  errorMsg      String?   @db.Text // 错误消息
  operTime      DateTime  @default(now()) // 操作时间
  userId        Int?      // 用户ID
  user          User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([operTime])
  @@index([userId])
  @@map("oper_logs")
}

// 资金账户类型
model AccountType {
  id          Int       @id @default(autoincrement())
  name        String    // 账户类型名称：如"支付宝"、"微信"、"银行卡"等
  icon        String?   // 图标
  description String?   // 描述
  status      String    @default("1") // 状态：1-启用 0-禁用
  isSystem    String    @default("0") // 是否系统内置
  sort        Int       @default(0)   // 排序
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  accounts    Account[] // 关联的账户

  @@map("finance_account_types")
}

// 资金账户
model Account {
  id          Int       @id @default(autoincrement())
  name        String    // 账户名称：如"我的支付宝"、"工商银行卡"等
  typeId      Int       // 账户类型ID
  balance     Decimal   @db.Decimal(10, 2) // 账户余额
  icon        String?   // 自定义图标
  color       String?   // 自定义颜色
  userId      Int       // 所属用户ID
  status      String    @default("1") // 状态：1-启用 0-禁用
  isDefault   String    @default("0") // 是否默认账户
  sort        Int       @default(0)   // 排序
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  
  type        AccountType @relation(fields: [typeId], references: [id])
  user        User        @relation(fields: [userId], references: [id])
  bills       Bill[]      // 关联的账单
  transfers   TransferRecord[] @relation("FromAccount") // 作为转出账户
  transfersIn TransferRecord[] @relation("ToAccount")   // 作为转入账户
  templates   BillTemplate[] // 账单模板
  balanceAdjustLogs BalanceAdjustLog[] // 余额调整日志

  @@index([typeId])
  @@index([userId])
  @@map("finance_accounts")
  Bill Bill[] @relation("TargetAccount")
}

// 账户余额调整日志
model BalanceAdjustLog {
  id              Int       @id @default(autoincrement())
  accountId       Int       // 关联的账户ID
  previousBalance Decimal   @db.Decimal(10, 2) // 调整前余额
  newBalance      Decimal   @db.Decimal(10, 2) // 调整后余额
  reason          String?   // 调整原因
  userId          Int       // 操作用户ID
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt
  
  account         Account   @relation(fields: [accountId], references: [id])
  user            User      @relation(fields: [userId], references: [id])

  @@index([accountId])
  @@index([userId])
  @@map("finance_balance_adjust_logs")
}

// 账单分类
model BillCategory {
  id          Int       @id @default(autoincrement())
  name        String    // 分类名称：如"餐饮"、"交通"、"购物"等
  type        String    // 类型：income-收入 expense-支出 transfer-转账
  icon        String?   // 图标
  color       String?   // 颜色
  parentId    Int?      // 父分类ID，用于实现分类层级
  userId      Int?      // 所属用户ID，NULL表示系统默认分类
  status      String    @default("1") // 状态：1-启用 0-禁用
  isSystem    String    @default("0") // 是否系统内置
  sort        Int       @default(0)   // 排序
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  bills       Bill[]    // 关联的账单
  parent      BillCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    BillCategory[] @relation("CategoryHierarchy")
  user        User?         @relation(fields: [userId], references: [id])
  templates   BillTemplate[] // 账单模板

  @@index([parentId])
  @@index([userId])
  @@map("finance_bill_categories")
}

// 账单记录
model Bill {
  id          Int       @id @default(autoincrement())
  type        String    // 类型：income-收入 expense-支出 transfer-转账
  amount      Decimal   @db.Decimal(10, 2) // 金额
  categoryId  Int?      // 分类ID
  accountId   Int       // 账户ID
  targetAccountId Int?   // 目标账户ID（只用于转账类型）
  billDate    DateTime  // 账单日期
  description String?   // 描述/备注
  imageUrls   String?   // 图片URL，多个用逗号分隔
  location    String?   // 位置信息
  status      String    @default("1") // 状态：1-启用 0-禁用
  userId      Int       // 所属用户ID
  transferId  Int?      // 关联的转账记录ID（如果是转账类型）
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  
  category    BillCategory? @relation(fields: [categoryId], references: [id])
  account     Account      @relation(fields: [accountId], references: [id])
  targetAccount Account?   @relation("TargetAccount", fields: [targetAccountId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
  transfer    TransferRecord? @relation(fields: [transferId], references: [id])
  billTags    BillTagLink[] // 账单标签关联

  @@index([categoryId])
  @@index([accountId])
  @@index([targetAccountId])
  @@index([userId])
  @@index([transferId])
  @@index([billDate])
  @@map("finance_bills")
}

// 转账记录
model TransferRecord {
  id          Int       @id @default(autoincrement())
  billId      Int?      // 关联的账单ID
  fromAccountId Int     // 转出账户ID
  toAccountId   Int     // 转入账户ID
  amount      Decimal   @db.Decimal(10, 2) // 转账金额
  fee         Decimal?  @db.Decimal(10, 2) // 手续费
  transferDate DateTime  // 转账日期
  billDate    DateTime?  // 账单日期（与bill同步）
  description String?   // 描述/备注
  userId      Int       // 所属用户ID
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  
  fromAccount Account @relation("FromAccount", fields: [fromAccountId], references: [id])
  toAccount   Account @relation("ToAccount", fields: [toAccountId], references: [id])
  user        User    @relation(fields: [userId], references: [id])
  bills       Bill[]  // 关联的账单记录

  @@index([billId])
  @@index([fromAccountId])
  @@index([toAccountId])
  @@index([userId])
  @@index([transferDate])
  @@map("finance_transfer_records")
}

// 预算管理
model Budget {
  id          Int       @id @default(autoincrement())
  name        String    // 预算名称：如"2023年4月生活费"
  type        String    // 预算类型：monthly-月度 yearly-年度 custom-自定义
  startDate   DateTime  // 预算开始日期
  endDate     DateTime  // 预算结束日期
  amount      Decimal   @db.Decimal(10, 2) // 预算金额
  categoryIds String?   // 关联的分类ID，多个用逗号分隔，如"1,2,3"
  userId      Int       // 所属用户ID
  status      String    @default("1") // 状态：1-启用 0-禁用
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  user        User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([startDate, endDate])
  @@map("finance_budgets")
}

// 导入账单记录
model BillImport {
  id          Int       @id @default(autoincrement())
  fileName    String    // 导入文件名
  fileType    String    // 文件类型：alipay-支付宝 wechat-微信 bank-银行 custom-自定义
  totalCount  Int       // 总记录数
  successCount Int      // 成功导入数
  failCount   Int       // 失败数
  importDate  DateTime  @default(now()) // 导入日期
  status      String    // 状态：processing-处理中 success-成功 failed-失败
  errorLog    String?   @db.Text // 错误日志
  userId      Int       // 所属用户ID
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  user        User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("finance_bill_imports")
}

// 账单模板
model BillTemplate {
  id          Int       @id @default(autoincrement())
  name        String    // 模板名称
  type        String    // 类型：income-收入 expense-支出 transfer-转账
  amount      Decimal?  @db.Decimal(10, 2) // 金额，可为空
  categoryId  Int?      // 分类ID
  accountId   Int?      // 账户ID
  description String?   // 描述/备注
  tags        String?   // 标签，多个用逗号分隔
  userId      Int       // 所属用户ID
  sort        Int       @default(0) // 排序
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  
  category    BillCategory? @relation(fields: [categoryId], references: [id])
  account     Account?      @relation(fields: [accountId], references: [id])
  user        User          @relation(fields: [userId], references: [id])

  @@index([categoryId])
  @@index([accountId])
  @@index([userId])
  @@map("finance_bill_templates")
}

// 账单标签
model BillTag {
  id          Int       @id @default(autoincrement())
  name        String    // 标签名称
  color       String?   // 标签颜色
  userId      Int       // 所属用户ID
  useCount    Int       @default(0) // 使用次数
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  user        User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("finance_bill_tags")
  BillTagLink BillTagLink[]
}

// 账单-标签关联表
model BillTagLink {
  id        Int       @id @default(autoincrement())
  billId    Int       // 账单ID
  tagId     Int       // 标签ID
  createdAt DateTime  @default(now())
  
  bill      Bill      @relation(fields: [billId], references: [id], onDelete: Cascade)
  tag       BillTag   @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([billId, tagId]) // 一个账单不能重复关联同一个标签
  @@index([billId])
  @@index([tagId])
  @@map("finance_bill_tag_links")
}

// 账单统计规则
model BillStatRule {
  id          Int       @id @default(autoincrement())
  name        String    // 规则名称
  type        String    // 规则类型：category-分类统计 time-时间统计 account-账户统计 tag-标签统计
  config      String    @db.Text // 规则配置，JSON格式
  userId      Int       // 所属用户ID
  isDefault   String    @default("0") // 是否默认使用
  sort        Int       @default(0) // 排序
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  user        User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("finance_bill_stat_rules")
}
