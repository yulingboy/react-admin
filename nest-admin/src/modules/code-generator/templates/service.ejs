import { Injectable, NotFoundException } from '@nestjs/common';
import { PrismaService } from '@/shared/prisma/prisma.service';
import { Prisma } from '@prisma/client';
import { Create<%= className %>Dto, Update<%= className %>Dto, Query<%= className %>Dto } from '../dto/<%= helper.toKebabCase(className) %>.dto';

/**
 * <%= modelName %> 服务
 * @author <%= generator.functionAuthor %>
 * @date <%= new Date().toISOString().slice(0, 10) %>
 */
@Injectable()
export class <%= className %>Service {
  constructor(private prisma: PrismaService) {}

  /**
   * 创建<%= modelName %>
   */
  async create(dto: Create<%= className %>Dto) {
    return this.prisma.<%= helper.toCamelCase(generator.tableName) %>.create({
      data: dto,
    });
  }

  /**
   * 更新<%= modelName %>
   */
  async update(id: number, dto: Update<%= className %>Dto) {
    const existing = await this.prisma.<%= helper.toCamelCase(generator.tableName) %>.findUnique({
      where: { id },
    });

    if (!existing) {
      throw new NotFoundException(`ID为${id}的<%= modelName %>不存在`);
    }

    return this.prisma.<%= helper.toCamelCase(generator.tableName) %>.update({
      where: { id },
      data: dto,
    });
  }

  /**
   * 删除<%= modelName %>
   */
  async delete(id: number) {
    const existing = await this.prisma.<%= helper.toCamelCase(generator.tableName) %>.findUnique({
      where: { id },
    });

    if (!existing) {
      throw new NotFoundException(`ID为${id}的<%= modelName %>不存在`);
    }

    await this.prisma.<%= helper.toCamelCase(generator.tableName) %>.delete({
      where: { id },
    });
  }

  /**
   * 获取<%= modelName %>详情
   */
  async findOne(id: number) {
    const existing = await this.prisma.<%= helper.toCamelCase(generator.tableName) %>.findUnique({
      where: { id },
    });

    if (!existing) {
      throw new NotFoundException(`ID为${id}的<%= modelName %>不存在`);
    }

    return existing;
  }

  /**
   * 获取<%= modelName %>列表
   */
  async findAll(query: Query<%= className %>Dto) {
    const { page = 1, pageSize = 10, ...filters } = query;
    const skip = (page - 1) * pageSize;

    const where: Prisma.<%= helper.toPascalCase(generator.tableName) %>WhereInput = {};

    <% columns.forEach(column => { 
    if (column.isQuery) { 
      if (column.queryType === 'LIKE') { %>
    if (filters.<%= column.columnName %>) {
      where.<%= column.columnName %> = { contains: filters.<%= column.columnName %> };
    }
      <% } else { %>
    if (filters.<%= column.columnName %> !== undefined) {
      where.<%= column.columnName %> = filters.<%= column.columnName %>;
    }
      <% } 
    } 
    }); %>

    const [total, list] = await Promise.all([
      this.prisma.<%= helper.toCamelCase(generator.tableName) %>.count({ where }),
      this.prisma.<%= helper.toCamelCase(generator.tableName) %>.findMany({
        where,
        skip,
        take: pageSize,
        orderBy: { id: 'desc' },
      }),
    ]);

    return { total, list };
  }
}