import React, { useEffect } from 'react';
import { Form, Input, Modal, Select, DatePicker, InputNumber, Radio, Checkbox, Switch, message } from 'antd';
import { create<%= className %>, update<%= className %>, <%= className %> } from '@/api/<%= helper.toKebabCase(className) %>';
<% const hasDictColumns = columns.some(col => col.dictType); %>
<% if (hasDictColumns) { %>import { useDictionary } from '@/hooks/useDictionary';<% } %>
import moment from 'moment';

/**
 * <%= className %> 表单组件属性
 */
interface <%= className %>FormProps {
  visible: boolean;
  type: 'add' | 'edit';
  initialValues?: <%= className %>;
  onCancel: () => void;
  onSuccess: () => void;
}

/**
 * <%= className %> 表单组件
 * @author <%= generator.functionAuthor %>
 * @date <%= new Date().toISOString().slice(0, 10) %>
 */
const <%= className %>Form: React.FC<<%= className %>FormProps> = ({ 
  visible, 
  type, 
  initialValues,
  onCancel, 
  onSuccess 
}) => {
  const [form] = Form.useForm();
  const isEdit = type === 'edit';
  const title = isEdit ? '编辑<%= modelName %>' : '新增<%= modelName %>';

<% if (hasDictColumns) { %>
  // 加载字典数据
  const { dictionary, loading: dictLoading } = useDictionary([
    <% 
    const dictTypes = [...new Set(columns
      .filter(col => col.dictType)
      .map(col => `'${col.dictType}'`))]; 
    %>
    <%= dictTypes.join(', ') %>
  ]);
<% } %>

  useEffect(() => {
    if (visible) {
      form.resetFields();
      
      if (isEdit && initialValues) {
        // 处理日期类型字段
        const values = { ...initialValues };
        <% columns.forEach(column => { 
          if ((column.isInsert || column.isEdit) && column.tsType === 'Date') { %>
        if (values.<%= column.columnName %>) {
          values.<%= column.columnName %> = moment(values.<%= column.columnName %>);
        }
        <% }}) %>
        
        form.setFieldsValue(values);
      }
    }
  }, [visible, form, initialValues, isEdit]);

  // 表单提交
  const handleSubmit = async () => {
    try {
      const values = await form.validateFields();
      
      if (isEdit) {
        await update<%= className %>(initialValues!.id, values);
        message.success('更新成功');
      } else {
        await create<%= className %>(values);
        message.success('创建成功');
      }
      
      onSuccess();
    } catch (error) {
      console.error('表单提交失败:', error);
    }
  };

  return (
    <Modal
      title={title}
      open={visible}
      onCancel={onCancel}
      onOk={handleSubmit}
      width={600}
      destroyOnClose
      maskClosable={false}
      confirmLoading={false}
    >
      <Form 
        form={form}
        labelCol={{ span: 6 }}
        wrapperCol={{ span: 16 }}
        autoComplete="off"
      >
        <% columns.forEach(column => { 
          // 主键或自增字段在编辑时不显示
          if ((isEdit && column.isPk) || column.isIncrement) { 
            return; 
          }
          
          // 只有在插入或编辑时才显示相应字段
          const isVisible = (type === 'add' && column.isInsert) || (type === 'edit' && column.isEdit);
          
          if (isVisible) { 
        %>
        <Form.Item 
          label="<%= column.columnComment || column.columnName %>" 
          name="<%= column.columnName %>"
          <% if (column.isRequired) { %>
          rules={[{ required: true, message: '<%= column.columnComment || column.columnName %>不能为空' }]}
          <% } %>
        >
          <% if (column.htmlType === 'input') { %>
          <Input placeholder="请输入<%= column.columnComment || column.columnName %>" />
          <% } else if (column.htmlType === 'textarea') { %>
          <Input.TextArea rows={4} placeholder="请输入<%= column.columnComment || column.columnName %>" />
          <% } else if (column.htmlType === 'select' && column.dictType) { %>
          <Select
            placeholder="请选择<%= column.columnComment || column.columnName %>"
            allowClear
            options={dictionary['<%= column.dictType %>']?.map(item => ({
              value: item.value,
              label: item.label
            }))}
            loading={dictLoading}
          />
          <% } else if (column.htmlType === 'datetime') { %>
          <DatePicker 
            style={{ width: '100%' }} 
            showTime 
            format="YYYY-MM-DD HH:mm:ss" 
            placeholder="请选择<%= column.columnComment || column.columnName %>" 
          />
          <% } else if (column.htmlType === 'checkbox') { %>
          <Checkbox>是</Checkbox>
          <% } else if (column.htmlType === 'radio') { %>
          <Radio.Group>
            <Radio value="1">是</Radio>
            <Radio value="0">否</Radio>
          </Radio.Group>
          <% } else if (column.tsType === 'number') { %>
          <InputNumber style={{ width: '100%' }} placeholder="请输入<%= column.columnComment || column.columnName %>" />
          <% } else { %>
          <Input placeholder="请输入<%= column.columnComment || column.columnName %>" />
          <% } %>
        </Form.Item>
        <% }}); %>
      </Form>
    </Modal>
  );
};

export default <%= className %>Form;