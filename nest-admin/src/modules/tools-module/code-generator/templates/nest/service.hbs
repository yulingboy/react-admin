import { Injectable, NotFoundException, ConflictException, ForbiddenException } from '@nestjs/common';
import { PrismaService } from '../../../shared/prisma/prisma.service';
import { Create{{className}}Dto, Update{{className}}Dto, Query{{className}}Dto } from '../dto/{{kebabName}}.dto';
import { StatusEnum, IsSystemEnum } from 'src/common/enums/common.enum';

/**
 * {{generator.businessName}}管理服务类
 * 提供{{generator.businessName}}的增删改查业务逻辑和数据校验
 * @class {{className}}Service
 * @constructor
 * @param {PrismaService} prisma - Prisma服务
 */
@Injectable()
export class {{className}}Service {
  constructor(private prisma: PrismaService) {}

  /**
   * 创建{{generator.businessName}}
   * @param create{{className}}Dto 创建参数
   * @returns 创建的{{generator.businessName}}对象
   */
  async create(create{{className}}Dto: Create{{className}}Dto) {
    {{#each columns}}
    {{#if unique}}
    // 检查{{name}}是否存在
    const exist{{toPascalCase name}} = await this.prisma.{{toLowerFirstCase ../className}}.findUnique({
      where: { {{name}}: create{{../className}}Dto.{{name}} },
    });

    if (exist{{toPascalCase name}}) {
      throw new ConflictException('{{comment}} ' + create{{../className}}Dto.{{name}} + ' 已存在');
    }

    {{/if}}
    {{/each}}
    // 创建记录
    const data = await this.prisma.{{toLowerFirstCase className}}.create({
      data: {
        ...create{{className}}Dto,
        isSystem: IsSystemEnum.NO, // 设置为非系统数据
      },
    });

    return data;
  }

  /**
   * 分页查询{{generator.businessName}}列表
   * @param query{{className}}Dto 查询参数
   * @returns 分页的{{generator.businessName}}列表
   */
  async findAll(query{{className}}Dto: Query{{className}}Dto) {
    const { current = 1, pageSize = 10, {{#each columns}}{{name}}, {{/each}}status } = query{{className}}Dto;
    const skip = (current - 1) * pageSize;

    // 构建查询条件
    const where: any = {};

    {{#each columns}}
    if ({{name}}) {
      where.{{name}} = {
        contains: {{name}},
      };
    }

    {{/each}}
    if (status !== undefined) {
      where.status = status;
    }

    // 执行查询
    const [items, total] = await Promise.all([
      this.prisma.{{toLowerFirstCase className}}.findMany({
        where,
        skip,
        take: pageSize,
        orderBy: { id: 'asc' },
      }),
      this.prisma.{{toLowerFirstCase className}}.count({ where }),
    ]);

    return {
      items,
      meta: {
        page: current,
        pageSize: pageSize,
        total,
        totalPages: Math.ceil(total / pageSize),
      },
    };
  }

  /**
   * 根据ID查询{{generator.businessName}}
   * @param id {{generator.businessName}}ID
   * @returns {{generator.businessName}}详情
   * @throws {NotFoundException} 当{{generator.businessName}}不存在时抛出异常
   */
  async findOne(id: number) {
    const data = await this.prisma.{{toLowerFirstCase className}}.findUnique({
      where: { id },
    });

    if (!data) {
      throw new NotFoundException('{{generator.businessName}}不存在');
    }

    return data;
  }

  /**
   * 更新{{generator.businessName}}
   * @param id {{generator.businessName}}ID
   * @param update{{className}}Dto 更新参数
   * @returns 更新后的{{generator.businessName}}对象
   * @throws {NotFoundException} 当{{generator.businessName}}不存在时抛出异常
   * @throws {ForbiddenException} 当尝试修改系统内置数据时抛出异常
   */
  async update(id: number, update{{className}}Dto: Update{{className}}Dto) {
    // 检查记录是否存在
    const existData = await this.findOne(id);

    // 检查是否为系统内置数据
    if (existData.isSystem === IsSystemEnum.YES) {
      throw new ForbiddenException('系统内置数据不允许修改');
    }

    {{#each columns}}
    {{#if unique}}
    // 检查{{name}}是否存在
    if (update{{../className}}Dto.{{name}}) {
      const exist{{toPascalCase name}} = await this.prisma.{{toLowerFirstCase ../className}}.findUnique({
        where: { {{name}}: update{{../className}}Dto.{{name}} },
      });

      if (exist{{toPascalCase name}} && exist{{toPascalCase name}}.id !== id) {
        throw new ConflictException('{{comment}} ' + update{{../className}}Dto.{{name}} + ' 已存在');
      }
    }

    {{/if}}
    {{/each}}
    // 更新记录
    const data = await this.prisma.{{toLowerFirstCase className}}.update({
      where: { id },
      data: update{{className}}Dto,
    });

    return data;
  }

  /**
   * 删除{{generator.businessName}}
   * @param id {{generator.businessName}}ID
   * @returns 删除的{{generator.businessName}}对象
   * @throws {NotFoundException} 当{{generator.businessName}}不存在时抛出异常
   * @throws {ForbiddenException} 当尝试删除系统内置数据时抛出异常
   */
  async remove(id: number) {
    // 检查记录是否存在
    const existData = await this.findOne(id);

    // 检查是否为系统内置数据
    if (existData.isSystem === IsSystemEnum.YES) {
      throw new ForbiddenException('系统内置数据不允许删除');
    }

    // 删除记录
    const data = await this.prisma.{{toLowerFirstCase className}}.delete({
      where: { id },
    });

    return data;
  }
} 